{
  "version": 3,
  "sources": ["../../three/examples/jsm/loaders/3DMLoader.js"],
  "sourcesContent": ["import {\n\tBufferGeometryLoader,\n\tFileLoader,\n\tLoader,\n\tObject3D,\n\tMeshStandardMaterial,\n\tMesh,\n\tColor,\n\tPoints,\n\tPointsMaterial,\n\tLine,\n\tLineBasicMaterial,\n\tMatrix4,\n\tDirectionalLight,\n\tPointLight,\n\tSpotLight,\n\tRectAreaLight,\n\tSprite,\n\tSpriteMaterial,\n\tCanvasTexture,\n\tLinearFilter,\n\tClampToEdgeWrapping,\n\tRepeatWrapping,\n\tTextureLoader\n} from 'three';\n\nconst _taskCache = new WeakMap();\n\nclass Rhino3dmLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\tthis.libraryPath = '';\n\t\tthis.libraryPending = null;\n\t\tthis.libraryBinary = null;\n\t\tthis.libraryConfig = {};\n\n\t\tthis.url = '';\n\n\t\tthis.workerLimit = 4;\n\t\tthis.workerPool = [];\n\t\tthis.workerNextTaskID = 1;\n\t\tthis.workerSourceURL = '';\n\t\tthis.workerConfig = {};\n\n\t\tthis.materials = [];\n\t\tthis.warnings = [];\n\n\t}\n\n\tsetLibraryPath( path ) {\n\n\t\tthis.libraryPath = path;\n\n\t\treturn this;\n\n\t}\n\n\tsetWorkerLimit( workerLimit ) {\n\n\t\tthis.workerLimit = workerLimit;\n\n\t\treturn this;\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst loader = new FileLoader( this.manager );\n\n\t\tloader.setPath( this.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setRequestHeader( this.requestHeader );\n\n\t\tthis.url = url;\n\n\t\tloader.load( url, ( buffer ) => {\n\n\t\t\t// Check for an existing task using this buffer. A transferred buffer cannot be transferred\n\t\t\t// again from this thread.\n\t\t\tif ( _taskCache.has( buffer ) ) {\n\n\t\t\t\tconst cachedTask = _taskCache.get( buffer );\n\n\t\t\t\treturn cachedTask.promise.then( onLoad ).catch( onError );\n\n\t\t\t}\n\n\t\t\tthis.decodeObjects( buffer, url )\n\t\t\t\t.then( result => {\n\n\t\t\t\t\tresult.userData.warnings = this.warnings;\n\t\t\t\t\tonLoad( result );\n\n\t\t\t\t } )\n\t\t\t\t.catch( e => onError( e ) );\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tdebug() {\n\n\t\tconsole.log( 'Task load: ', this.workerPool.map( ( worker ) => worker._taskLoad ) );\n\n\t}\n\n\tdecodeObjects( buffer, url ) {\n\n\t\tlet worker;\n\t\tlet taskID;\n\n\t\tconst taskCost = buffer.byteLength;\n\n\t\tconst objectPending = this._getWorker( taskCost )\n\t\t\t.then( ( _worker ) => {\n\n\t\t\t\tworker = _worker;\n\t\t\t\ttaskID = this.workerNextTaskID ++;\n\n\t\t\t\treturn new Promise( ( resolve, reject ) => {\n\n\t\t\t\t\tworker._callbacks[ taskID ] = { resolve, reject };\n\n\t\t\t\t\tworker.postMessage( { type: 'decode', id: taskID, buffer }, [ buffer ] );\n\n\t\t\t\t\t// this.debug();\n\n\t\t\t\t} );\n\n\t\t\t} )\n\t\t\t.then( ( message ) => this._createGeometry( message.data ) )\n\t\t\t.catch( e => {\n\n\t\t\t\tthrow e;\n\n\t\t\t} );\n\n\t\t// Remove task from the task list.\n\t\t// Note: replaced '.finally()' with '.catch().then()' block - iOS 11 support (#19416)\n\t\tobjectPending\n\t\t\t.catch( () => true )\n\t\t\t.then( () => {\n\n\t\t\t\tif ( worker && taskID ) {\n\n\t\t\t\t\tthis._releaseTask( worker, taskID );\n\n\t\t\t\t\t//this.debug();\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t// Cache the task result.\n\t\t_taskCache.set( buffer, {\n\n\t\t\turl: url,\n\t\t\tpromise: objectPending\n\n\t\t} );\n\n\t\treturn objectPending;\n\n\t}\n\n\tparse( data, onLoad, onError ) {\n\n\t\tthis.decodeObjects( data, '' )\n\t\t\t.then( result => {\n\n\t\t\t\tresult.userData.warnings = this.warnings;\n\t\t\t\tonLoad( result );\n\n\t\t\t} )\n\t\t\t.catch( e => onError( e ) );\n\n\t}\n\n\t_compareMaterials( material ) {\n\n\t\tconst mat = {};\n\t\tmat.name = material.name;\n\t\tmat.color = {};\n\t\tmat.color.r = material.color.r;\n\t\tmat.color.g = material.color.g;\n\t\tmat.color.b = material.color.b;\n\t\tmat.type = material.type;\n\n\t\tfor ( let i = 0; i < this.materials.length; i ++ ) {\n\n\t\t\tconst m = this.materials[ i ];\n\t\t\tconst _mat = {};\n\t\t\t_mat.name = m.name;\n\t\t\t_mat.color = {};\n\t\t\t_mat.color.r = m.color.r;\n\t\t\t_mat.color.g = m.color.g;\n\t\t\t_mat.color.b = m.color.b;\n\t\t\t_mat.type = m.type;\n\n\t\t\tif ( JSON.stringify( mat ) === JSON.stringify( _mat ) ) {\n\n\t\t\t\treturn m;\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.materials.push( material );\n\n\t\treturn material;\n\n\t}\n\n\t_createMaterial( material ) {\n\n\t\tif ( material === undefined ) {\n\n\t\t\treturn new MeshStandardMaterial( {\n\t\t\t\tcolor: new Color( 1, 1, 1 ),\n\t\t\t\tmetalness: 0.8,\n\t\t\t\tname: 'default',\n\t\t\t\tside: 2\n\t\t\t} );\n\n\t\t}\n\n\t\tconst _diffuseColor = material.diffuseColor;\n\n\t\tconst diffusecolor = new Color( _diffuseColor.r / 255.0, _diffuseColor.g / 255.0, _diffuseColor.b / 255.0 );\n\n\t\tif ( _diffuseColor.r === 0 && _diffuseColor.g === 0 && _diffuseColor.b === 0 ) {\n\n\t\t\tdiffusecolor.r = 1;\n\t\t\tdiffusecolor.g = 1;\n\t\t\tdiffusecolor.b = 1;\n\n\t\t}\n\n\t\t// console.log( material );\n\n\t\tconst mat = new MeshStandardMaterial( {\n\t\t\tcolor: diffusecolor,\n\t\t\tname: material.name,\n\t\t\tside: 2,\n\t\t\ttransparent: material.transparency > 0 ? true : false,\n\t\t\topacity: 1.0 - material.transparency\n\t\t} );\n\n\t\tconst textureLoader = new TextureLoader();\n\n\t\tfor ( let i = 0; i < material.textures.length; i ++ ) {\n\n\t\t\tconst texture = material.textures[ i ];\n\n\t\t\tif ( texture.image !== null ) {\n\n\t\t\t\tconst map = textureLoader.load( texture.image );\n\n\t\t\t\tswitch ( texture.type ) {\n\n\t\t\t\t\tcase 'Diffuse':\n\n\t\t\t\t\t\tmat.map = map;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Bump':\n\n\t\t\t\t\t\tmat.bumpMap = map;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Transparency':\n\n\t\t\t\t\t\tmat.alphaMap = map;\n\t\t\t\t\t\tmat.transparent = true;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Emap':\n\n\t\t\t\t\t\tmat.envMap = map;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tmap.wrapS = texture.wrapU === 0 ? RepeatWrapping : ClampToEdgeWrapping;\n\t\t\t\tmap.wrapT = texture.wrapV === 0 ? RepeatWrapping : ClampToEdgeWrapping;\n\t\t\t\tmap.repeat.set( texture.repeat[ 0 ], texture.repeat[ 1 ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn mat;\n\n\t}\n\n\t_createGeometry( data ) {\n\n\t\t// console.log(data);\n\n\t\tconst object = new Object3D();\n\t\tconst instanceDefinitionObjects = [];\n\t\tconst instanceDefinitions = [];\n\t\tconst instanceReferences = [];\n\n\t\tobject.userData[ 'layers' ] = data.layers;\n\t\tobject.userData[ 'groups' ] = data.groups;\n\t\tobject.userData[ 'settings' ] = data.settings;\n\t\tobject.userData[ 'objectType' ] = 'File3dm';\n\t\tobject.userData[ 'materials' ] = null;\n\t\tobject.name = this.url;\n\n\t\tlet objects = data.objects;\n\t\tconst materials = data.materials;\n\n\t\tfor ( let i = 0; i < objects.length; i ++ ) {\n\n\t\t\tconst obj = objects[ i ];\n\t\t\tconst attributes = obj.attributes;\n\n\t\t\tswitch ( obj.objectType ) {\n\n\t\t\t\tcase 'InstanceDefinition':\n\n\t\t\t\t\tinstanceDefinitions.push( obj );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'InstanceReference':\n\n\t\t\t\t\tinstanceReferences.push( obj );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tlet _object;\n\n\t\t\t\t\tif ( attributes.materialIndex >= 0 ) {\n\n\t\t\t\t\t\tconst rMaterial = materials[ attributes.materialIndex ];\n\t\t\t\t\t\tlet material = this._createMaterial( rMaterial );\n\t\t\t\t\t\tmaterial = this._compareMaterials( material );\n\t\t\t\t\t\t_object = this._createObject( obj, material );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconst material = this._createMaterial();\n\t\t\t\t\t\t_object = this._createObject( obj, material );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( _object === undefined ) {\n\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst layer = data.layers[ attributes.layerIndex ];\n\n\t\t\t\t\t_object.visible = layer ? data.layers[ attributes.layerIndex ].visible : true;\n\n\t\t\t\t\tif ( attributes.isInstanceDefinitionObject ) {\n\n\t\t\t\t\t\tinstanceDefinitionObjects.push( _object );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tobject.add( _object );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( let i = 0; i < instanceDefinitions.length; i ++ ) {\n\n\t\t\tconst iDef = instanceDefinitions[ i ];\n\n\t\t\tobjects = [];\n\n\t\t\tfor ( let j = 0; j < iDef.attributes.objectIds.length; j ++ ) {\n\n\t\t\t\tconst objId = iDef.attributes.objectIds[ j ];\n\n\t\t\t\tfor ( let p = 0; p < instanceDefinitionObjects.length; p ++ ) {\n\n\t\t\t\t\tconst idoId = instanceDefinitionObjects[ p ].userData.attributes.id;\n\n\t\t\t\t\tif ( objId === idoId ) {\n\n\t\t\t\t\t\tobjects.push( instanceDefinitionObjects[ p ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Currently clones geometry and does not take advantage of instancing\n\n\t\t\tfor ( let j = 0; j < instanceReferences.length; j ++ ) {\n\n\t\t\t\tconst iRef = instanceReferences[ j ];\n\n\t\t\t\tif ( iRef.geometry.parentIdefId === iDef.attributes.id ) {\n\n\t\t\t\t\tconst iRefObject = new Object3D();\n\t\t\t\t\tconst xf = iRef.geometry.xform.array;\n\n\t\t\t\t\tconst matrix = new Matrix4();\n          \t\t\tmatrix.set( xf[ 0 ], xf[ 1 ], xf[ 2 ], xf[ 3 ], xf[ 4 ], xf[ 5 ], xf[ 6 ], xf[ 7 ], xf[ 8 ], xf[ 9 ], xf[ 10 ], xf[ 11 ], xf[ 12 ], xf[ 13 ], xf[ 14 ], xf[ 15 ] );\n\n\t\t\t\t\tiRefObject.applyMatrix4( matrix );\n\n\t\t\t\t\tfor ( let p = 0; p < objects.length; p ++ ) {\n\n\t\t\t\t\t\tiRefObject.add( objects[ p ].clone( true ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tobject.add( iRefObject );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tobject.userData[ 'materials' ] = this.materials;\n\t\treturn object;\n\n\t}\n\n\t_createObject( obj, mat ) {\n\n\t\tconst loader = new BufferGeometryLoader();\n\n\t\tconst attributes = obj.attributes;\n\n\t\tlet geometry, material, _color, color;\n\n\t\tswitch ( obj.objectType ) {\n\n\t\t\tcase 'Point':\n\t\t\tcase 'PointSet':\n\n\t\t\t\tgeometry = loader.parse( obj.geometry );\n\n\t\t\t\tif ( geometry.attributes.hasOwnProperty( 'color' ) ) {\n\n\t\t\t\t\tmaterial = new PointsMaterial( { vertexColors: true, sizeAttenuation: false, size: 2 } );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_color = attributes.drawColor;\n\t\t\t\t\tcolor = new Color( _color.r / 255.0, _color.g / 255.0, _color.b / 255.0 );\n\t\t\t\t\tmaterial = new PointsMaterial( { color: color, sizeAttenuation: false, size: 2 } );\n\n\t\t\t\t}\n\n\t\t\t\tmaterial = this._compareMaterials( material );\n\n\t\t\t\tconst points = new Points( geometry, material );\n\t\t\t\tpoints.userData[ 'attributes' ] = attributes;\n\t\t\t\tpoints.userData[ 'objectType' ] = obj.objectType;\n\n\t\t\t\tif ( attributes.name ) {\n\n\t\t\t\t\tpoints.name = attributes.name;\n\n\t\t\t\t}\n\n\t\t\t\treturn points;\n\n\t\t\tcase 'Mesh':\n\t\t\tcase 'Extrusion':\n\t\t\tcase 'SubD':\n\t\t\tcase 'Brep':\n\n\t\t\t\tif ( obj.geometry === null ) return;\n\n\t\t\t\tgeometry = loader.parse( obj.geometry );\n\n\t\t\t\tif ( geometry.attributes.hasOwnProperty( 'color' ) ) {\n\n\t\t\t\t\tmat.vertexColors = true;\n\n\t\t\t\t}\n\n\t\t\t\tif ( mat === null ) {\n\n\t\t\t\t\tmat = this._createMaterial();\n\t\t\t\t\tmat = this._compareMaterials( mat );\n\n\t\t\t\t}\n\n\t\t\t\tconst mesh = new Mesh( geometry, mat );\n\t\t\t\tmesh.castShadow = attributes.castsShadows;\n\t\t\t\tmesh.receiveShadow = attributes.receivesShadows;\n\t\t\t\tmesh.userData[ 'attributes' ] = attributes;\n\t\t\t\tmesh.userData[ 'objectType' ] = obj.objectType;\n\n\t\t\t\tif ( attributes.name ) {\n\n\t\t\t\t\tmesh.name = attributes.name;\n\n\t\t\t\t}\n\n\t\t\t\treturn mesh;\n\n\t\t\tcase 'Curve':\n\n\t\t\t\tgeometry = loader.parse( obj.geometry );\n\n\t\t\t\t_color = attributes.drawColor;\n\t\t\t\tcolor = new Color( _color.r / 255.0, _color.g / 255.0, _color.b / 255.0 );\n\n\t\t\t\tmaterial = new LineBasicMaterial( { color: color } );\n\t\t\t\tmaterial = this._compareMaterials( material );\n\n\t\t\t\tconst lines = new Line( geometry, material );\n\t\t\t\tlines.userData[ 'attributes' ] = attributes;\n\t\t\t\tlines.userData[ 'objectType' ] = obj.objectType;\n\n\t\t\t\tif ( attributes.name ) {\n\n\t\t\t\t\tlines.name = attributes.name;\n\n\t\t\t\t}\n\n\t\t\t\treturn lines;\n\n\t\t\tcase 'TextDot':\n\n\t\t\t\tgeometry = obj.geometry;\n\n\t\t\t\tconst ctx = document.createElement( 'canvas' ).getContext( '2d' );\n\t\t\t\tconst font = `${geometry.fontHeight}px ${geometry.fontFace}`;\n\t\t\t\tctx.font = font;\n\t\t\t\tconst width = ctx.measureText( geometry.text ).width + 10;\n\t\t\t\tconst height = geometry.fontHeight + 10;\n\n\t\t\t\tconst r = window.devicePixelRatio;\n\n\t\t\t\tctx.canvas.width = width * r;\n\t\t\t\tctx.canvas.height = height * r;\n\t\t\t\tctx.canvas.style.width = width + 'px';\n\t\t\t\tctx.canvas.style.height = height + 'px';\n\t\t\t\tctx.setTransform( r, 0, 0, r, 0, 0 );\n\n\t\t\t\tctx.font = font;\n\t\t\t\tctx.textBaseline = 'middle';\n\t\t\t\tctx.textAlign = 'center';\n\t\t\t\tcolor = attributes.drawColor;\n\t\t\t\tctx.fillStyle = `rgba(${color.r},${color.g},${color.b},${color.a})`;\n\t\t\t\tctx.fillRect( 0, 0, width, height );\n\t\t\t\tctx.fillStyle = 'white';\n\t\t\t\tctx.fillText( geometry.text, width / 2, height / 2 );\n\n\t\t\t\tconst texture = new CanvasTexture( ctx.canvas );\n\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\ttexture.wrapS = ClampToEdgeWrapping;\n\t\t\t\ttexture.wrapT = ClampToEdgeWrapping;\n\n\t\t\t\tmaterial = new SpriteMaterial( { map: texture, depthTest: false } );\n\t\t\t\tconst sprite = new Sprite( material );\n\t\t\t\tsprite.position.set( geometry.point[ 0 ], geometry.point[ 1 ], geometry.point[ 2 ] );\n\t\t\t\tsprite.scale.set( width / 10, height / 10, 1.0 );\n\n\t\t\t\tsprite.userData[ 'attributes' ] = attributes;\n\t\t\t\tsprite.userData[ 'objectType' ] = obj.objectType;\n\n\t\t\t\tif ( attributes.name ) {\n\n\t\t\t\t\tsprite.name = attributes.name;\n\n\t\t\t\t}\n\n\t\t\t\treturn sprite;\n\n\t\t\tcase 'Light':\n\n\t\t\t\tgeometry = obj.geometry;\n\n\t\t\t\tlet light;\n\n\t\t\t\tswitch ( geometry.lightStyle.name ) {\n\n\t\t\t\t\tcase 'LightStyle_WorldPoint':\n\n\t\t\t\t\t\tlight = new PointLight();\n\t\t\t\t\t\tlight.castShadow = attributes.castsShadows;\n\t\t\t\t\t\tlight.position.set( geometry.location[ 0 ], geometry.location[ 1 ], geometry.location[ 2 ] );\n\t\t\t\t\t\tlight.shadow.normalBias = 0.1;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'LightStyle_WorldSpot':\n\n\t\t\t\t\t\tlight = new SpotLight();\n\t\t\t\t\t\tlight.castShadow = attributes.castsShadows;\n\t\t\t\t\t\tlight.position.set( geometry.location[ 0 ], geometry.location[ 1 ], geometry.location[ 2 ] );\n\t\t\t\t\t\tlight.target.position.set( geometry.direction[ 0 ], geometry.direction[ 1 ], geometry.direction[ 2 ] );\n\t\t\t\t\t\tlight.angle = geometry.spotAngleRadians;\n\t\t\t\t\t\tlight.shadow.normalBias = 0.1;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'LightStyle_WorldRectangular':\n\n\t\t\t\t\t\tlight = new RectAreaLight();\n\t\t\t\t\t\tconst width = Math.abs( geometry.width[ 2 ] );\n\t\t\t\t\t\tconst height = Math.abs( geometry.length[ 0 ] );\n\t\t\t\t\t\tlight.position.set( geometry.location[ 0 ] - ( height / 2 ), geometry.location[ 1 ], geometry.location[ 2 ] - ( width / 2 ) );\n\t\t\t\t\t\tlight.height = height;\n\t\t\t\t\t\tlight.width = width;\n\t\t\t\t\t\tlight.lookAt( geometry.direction[ 0 ], geometry.direction[ 1 ], geometry.direction[ 2 ] );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'LightStyle_WorldDirectional':\n\n\t\t\t\t\t\tlight = new DirectionalLight();\n\t\t\t\t\t\tlight.castShadow = attributes.castsShadows;\n\t\t\t\t\t\tlight.position.set( geometry.location[ 0 ], geometry.location[ 1 ], geometry.location[ 2 ] );\n\t\t\t\t\t\tlight.target.position.set( geometry.direction[ 0 ], geometry.direction[ 1 ], geometry.direction[ 2 ] );\n\t\t\t\t\t\tlight.shadow.normalBias = 0.1;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'LightStyle_WorldLinear':\n\t\t\t\t\t\t// not conversion exists, warning has already been printed to the console\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tif ( light ) {\n\n\t\t\t\t\tlight.intensity = geometry.intensity;\n\t\t\t\t\t_color = geometry.diffuse;\n\t\t\t\t\tcolor = new Color( _color.r / 255.0, _color.g / 255.0, _color.b / 255.0 );\n\t\t\t\t\tlight.color = color;\n\t\t\t\t\tlight.userData[ 'attributes' ] = attributes;\n\t\t\t\t\tlight.userData[ 'objectType' ] = obj.objectType;\n\n\t\t\t\t}\n\n\t\t\t\treturn light;\n\n\t\t}\n\n\t}\n\n\t_initLibrary() {\n\n\t\tif ( ! this.libraryPending ) {\n\n\t\t\t// Load rhino3dm wrapper.\n\t\t\tconst jsLoader = new FileLoader( this.manager );\n\t\t\tjsLoader.setPath( this.libraryPath );\n\t\t\tconst jsContent = new Promise( ( resolve, reject ) => {\n\n\t\t\t\tjsLoader.load( 'rhino3dm.js', resolve, undefined, reject );\n\n\t\t\t} );\n\n\t\t\t// Load rhino3dm WASM binary.\n\t\t\tconst binaryLoader = new FileLoader( this.manager );\n\t\t\tbinaryLoader.setPath( this.libraryPath );\n\t\t\tbinaryLoader.setResponseType( 'arraybuffer' );\n\t\t\tconst binaryContent = new Promise( ( resolve, reject ) => {\n\n\t\t\t\tbinaryLoader.load( 'rhino3dm.wasm', resolve, undefined, reject );\n\n\t\t\t} );\n\n\t\t\tthis.libraryPending = Promise.all( [ jsContent, binaryContent ] )\n\t\t\t\t.then( ( [ jsContent, binaryContent ] ) => {\n\n\t\t\t\t\t//this.libraryBinary = binaryContent;\n\t\t\t\t\tthis.libraryConfig.wasmBinary = binaryContent;\n\n\t\t\t\t\tconst fn = Rhino3dmWorker.toString();\n\n\t\t\t\t\tconst body = [\n\t\t\t\t\t\t'/* rhino3dm.js */',\n\t\t\t\t\t\tjsContent,\n\t\t\t\t\t\t'/* worker */',\n\t\t\t\t\t\tfn.substring( fn.indexOf( '{' ) + 1, fn.lastIndexOf( '}' ) )\n\t\t\t\t\t].join( '\\n' );\n\n\t\t\t\t\tthis.workerSourceURL = URL.createObjectURL( new Blob( [ body ] ) );\n\n\t\t\t\t} );\n\n\t\t}\n\n\t\treturn this.libraryPending;\n\n\t}\n\n\t_getWorker( taskCost ) {\n\n\t\treturn this._initLibrary().then( () => {\n\n\t\t\tif ( this.workerPool.length < this.workerLimit ) {\n\n\t\t\t\tconst worker = new Worker( this.workerSourceURL );\n\n\t\t\t\tworker._callbacks = {};\n\t\t\t\tworker._taskCosts = {};\n\t\t\t\tworker._taskLoad = 0;\n\n\t\t\t\tworker.postMessage( {\n\t\t\t\t\ttype: 'init',\n\t\t\t\t\tlibraryConfig: this.libraryConfig\n\t\t\t\t} );\n\n\t\t\t\tworker.onmessage = e => {\n\n\t\t\t\t\tconst message = e.data;\n\n\t\t\t\t\tswitch ( message.type ) {\n\n\t\t\t\t\t\tcase 'warning':\n\t\t\t\t\t\t\tthis.warnings.push( message.data );\n\t\t\t\t\t\t\tconsole.warn( message.data );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'decode':\n\t\t\t\t\t\t\tworker._callbacks[ message.id ].resolve( message );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'error':\n\t\t\t\t\t\t\tworker._callbacks[ message.id ].reject( message );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.Rhino3dmLoader: Unexpected message, \"' + message.type + '\"' );\n\n\t\t\t\t\t}\n\n\t\t\t\t};\n\n\t\t\t\tthis.workerPool.push( worker );\n\n\t\t\t} else {\n\n\t\t\t\tthis.workerPool.sort( function ( a, b ) {\n\n\t\t\t\t\treturn a._taskLoad > b._taskLoad ? - 1 : 1;\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tconst worker = this.workerPool[ this.workerPool.length - 1 ];\n\n\t\t\tworker._taskLoad += taskCost;\n\n\t\t\treturn worker;\n\n\t\t} );\n\n\t}\n\n\t_releaseTask( worker, taskID ) {\n\n\t\tworker._taskLoad -= worker._taskCosts[ taskID ];\n\t\tdelete worker._callbacks[ taskID ];\n\t\tdelete worker._taskCosts[ taskID ];\n\n\t}\n\n\tdispose() {\n\n\t\tfor ( let i = 0; i < this.workerPool.length; ++ i ) {\n\n\t\t\tthis.workerPool[ i ].terminate();\n\n\t\t}\n\n\t\tthis.workerPool.length = 0;\n\n\t\treturn this;\n\n\t}\n\n}\n\n/* WEB WORKER */\n\nfunction Rhino3dmWorker() {\n\n\tlet libraryPending;\n\tlet libraryConfig;\n\tlet rhino;\n\tlet taskID;\n\n\tonmessage = function ( e ) {\n\n\t\tconst message = e.data;\n\n\t\tswitch ( message.type ) {\n\n\t\t\tcase 'init':\n\n\t\t\t\t// console.log(message)\n\t\t\t\tlibraryConfig = message.libraryConfig;\n\t\t\t\tconst wasmBinary = libraryConfig.wasmBinary;\n\t\t\t\tlet RhinoModule;\n\t\t\t\tlibraryPending = new Promise( function ( resolve ) {\n\n\t\t\t\t\t/* Like Basis Loader */\n\t\t\t\t\tRhinoModule = { wasmBinary, onRuntimeInitialized: resolve };\n\n\t\t\t\t\trhino3dm( RhinoModule ); // eslint-disable-line no-undef\n\n\t\t\t\t } ).then( () => {\n\n\t\t\t\t\trhino = RhinoModule;\n\n\t\t\t\t } );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'decode':\n\n\t\t\t\ttaskID = message.id;\n\t\t\t\tconst buffer = message.buffer;\n\t\t\t\tlibraryPending.then( () => {\n\n\t\t\t\t\ttry {\n\n\t\t\t\t\t\tconst data = decodeObjects( rhino, buffer );\n\t\t\t\t\t\tself.postMessage( { type: 'decode', id: message.id, data } );\n\n\t\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\t\tself.postMessage( { type: 'error', id: message.id, error } );\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\tbreak;\n\n\t\t}\n\n\t};\n\n\tfunction decodeObjects( rhino, buffer ) {\n\n\t\tconst arr = new Uint8Array( buffer );\n\t\tconst doc = rhino.File3dm.fromByteArray( arr );\n\n\t\tconst objects = [];\n\t\tconst materials = [];\n\t\tconst layers = [];\n\t\tconst views = [];\n\t\tconst namedViews = [];\n\t\tconst groups = [];\n\t\tconst strings = [];\n\n\t\t//Handle objects\n\n\t\tconst objs = doc.objects();\n\t\tconst cnt = objs.count;\n\n\t\tfor ( let i = 0; i < cnt; i ++ ) {\n\n\t\t\tconst _object = objs.get( i );\n\n\t\t\tconst object = extractObjectData( _object, doc );\n\n\t\t\t_object.delete();\n\n\t\t\tif ( object ) {\n\n\t\t\t\tobjects.push( object );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Handle instance definitions\n\t\t// console.log( `Instance Definitions Count: ${doc.instanceDefinitions().count()}` );\n\n\t\tfor ( let i = 0; i < doc.instanceDefinitions().count(); i ++ ) {\n\n\t\t\tconst idef = doc.instanceDefinitions().get( i );\n\t\t\tconst idefAttributes = extractProperties( idef );\n\t\t\tidefAttributes.objectIds = idef.getObjectIds();\n\n\t\t\tobjects.push( { geometry: null, attributes: idefAttributes, objectType: 'InstanceDefinition' } );\n\n\t\t}\n\n\t\t// Handle materials\n\n\t\tconst textureTypes = [\n\t\t\t// rhino.TextureType.Bitmap,\n\t\t\trhino.TextureType.Diffuse,\n\t\t\trhino.TextureType.Bump,\n\t\t\trhino.TextureType.Transparency,\n\t\t\trhino.TextureType.Opacity,\n\t\t\trhino.TextureType.Emap\n\t\t];\n\n\t\tconst pbrTextureTypes = [\n\t\t\trhino.TextureType.PBR_BaseColor,\n\t\t\trhino.TextureType.PBR_Subsurface,\n\t\t\trhino.TextureType.PBR_SubsurfaceScattering,\n\t\t\trhino.TextureType.PBR_SubsurfaceScatteringRadius,\n\t\t\trhino.TextureType.PBR_Metallic,\n\t\t\trhino.TextureType.PBR_Specular,\n\t\t\trhino.TextureType.PBR_SpecularTint,\n\t\t\trhino.TextureType.PBR_Roughness,\n\t\t\trhino.TextureType.PBR_Anisotropic,\n\t\t\trhino.TextureType.PBR_Anisotropic_Rotation,\n\t\t\trhino.TextureType.PBR_Sheen,\n\t\t\trhino.TextureType.PBR_SheenTint,\n\t\t\trhino.TextureType.PBR_Clearcoat,\n\t\t\trhino.TextureType.PBR_ClearcoatBump,\n\t\t\trhino.TextureType.PBR_ClearcoatRoughness,\n\t\t\trhino.TextureType.PBR_OpacityIor,\n\t\t\trhino.TextureType.PBR_OpacityRoughness,\n\t\t\trhino.TextureType.PBR_Emission,\n\t\t\trhino.TextureType.PBR_AmbientOcclusion,\n\t\t\trhino.TextureType.PBR_Displacement\n\t\t];\n\n\t\tfor ( let i = 0; i < doc.materials().count(); i ++ ) {\n\n\t\t\tconst _material = doc.materials().get( i );\n\t\t\tconst _pbrMaterial = _material.physicallyBased();\n\n\t\t\tlet material = extractProperties( _material );\n\n\t\t\tconst textures = [];\n\n\t\t\tfor ( let j = 0; j < textureTypes.length; j ++ ) {\n\n\t\t\t\tconst _texture = _material.getTexture( textureTypes[ j ] );\n\t\t\t\tif ( _texture ) {\n\n\t\t\t\t\tlet textureType = textureTypes[ j ].constructor.name;\n\t\t\t\t\ttextureType = textureType.substring( 12, textureType.length );\n\t\t\t\t\tconst texture = { type: textureType };\n\n\t\t\t\t\tconst image = doc.getEmbeddedFileAsBase64( _texture.fileName );\n\n\t\t\t\t\ttexture.wrapU = _texture.wrapU;\n\t\t\t\t\ttexture.wrapV = _texture.wrapV;\n\t\t\t\t\ttexture.wrapW = _texture.wrapW;\n\t\t\t\t\tconst uvw = _texture.uvwTransform.toFloatArray( true );\n\t\t\t\t\ttexture.repeat = [ uvw[ 0 ], uvw[ 5 ] ];\n\n\t\t\t\t\tif ( image ) {\n\n\t\t\t\t\t\ttexture.image = 'data:image/png;base64,' + image;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tself.postMessage( { type: 'warning', id: taskID, data: {\n\t\t\t\t\t\t\tmessage: `THREE.3DMLoader: Image for ${textureType} texture not embedded in file.`,\n\t\t\t\t\t\t\ttype: 'missing resource'\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t\ttexture.image = null;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttextures.push( texture );\n\n\t\t\t\t\t_texture.delete();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tmaterial.textures = textures;\n\n\t\t\tif ( _pbrMaterial.supported ) {\n\n\t\t\t\tfor ( let j = 0; j < pbrTextureTypes.length; j ++ ) {\n\n\t\t\t\t\tconst _texture = _material.getTexture( pbrTextureTypes[ j ] );\n\t\t\t\t\tif ( _texture ) {\n\n\t\t\t\t\t\tconst image = doc.getEmbeddedFileAsBase64( _texture.fileName );\n\t\t\t\t\t\tlet textureType = pbrTextureTypes[ j ].constructor.name;\n\t\t\t\t\t\ttextureType = textureType.substring( 12, textureType.length );\n\t\t\t\t\t\tconst texture = { type: textureType, image: 'data:image/png;base64,' + image };\n\t\t\t\t\t\ttextures.push( texture );\n\n\t\t\t\t\t\t_texture.delete();\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tconst pbMaterialProperties = extractProperties( _material.physicallyBased() );\n\n\t\t\t\tmaterial = Object.assign( pbMaterialProperties, material );\n\n\t\t\t}\n\n\t\t\tmaterials.push( material );\n\n\t\t\t_material.delete();\n\t\t\t_pbrMaterial.delete();\n\n\t\t}\n\n\t\t// Handle layers\n\n\t\tfor ( let i = 0; i < doc.layers().count(); i ++ ) {\n\n\t\t\tconst _layer = doc.layers().get( i );\n\t\t\tconst layer = extractProperties( _layer );\n\n\t\t\tlayers.push( layer );\n\n\t\t\t_layer.delete();\n\n\t\t}\n\n\t\t// Handle views\n\n\t\tfor ( let i = 0; i < doc.views().count(); i ++ ) {\n\n\t\t\tconst _view = doc.views().get( i );\n\t\t\tconst view = extractProperties( _view );\n\n\t\t\tviews.push( view );\n\n\t\t\t_view.delete();\n\n\t\t}\n\n\t\t// Handle named views\n\n\t\tfor ( let i = 0; i < doc.namedViews().count(); i ++ ) {\n\n\t\t\tconst _namedView = doc.namedViews().get( i );\n\t\t\tconst namedView = extractProperties( _namedView );\n\n\t\t\tnamedViews.push( namedView );\n\n\t\t\t_namedView.delete();\n\n\t\t}\n\n\t\t// Handle groups\n\n\t\tfor ( let i = 0; i < doc.groups().count(); i ++ ) {\n\n\t\t\tconst _group = doc.groups().get( i );\n\t\t\tconst group = extractProperties( _group );\n\n\t\t\tgroups.push( group );\n\n\t\t\t_group.delete();\n\n\t\t}\n\n\t\t// Handle settings\n\n\t\tconst settings = extractProperties( doc.settings() );\n\n\t\t//TODO: Handle other document stuff like dimstyles, instance definitions, bitmaps etc.\n\n\t\t// Handle dimstyles\n\t\t// console.log( `Dimstyle Count: ${doc.dimstyles().count()}` );\n\n\t\t// Handle bitmaps\n\t\t// console.log( `Bitmap Count: ${doc.bitmaps().count()}` );\n\n\t\t// Handle strings\n\t\t// console.log( `Document Strings Count: ${doc.strings().count()}` );\n\t\t// Note: doc.strings().documentUserTextCount() counts any doc.strings defined in a section\n\t\t//console.log( `Document User Text Count: ${doc.strings().documentUserTextCount()}` );\n\n\t\tconst strings_count = doc.strings().count();\n\n\t\tfor ( let i = 0; i < strings_count; i ++ ) {\n\n\t\t\tstrings.push( doc.strings().get( i ) );\n\n\t\t}\n\n\t\tdoc.delete();\n\n\t\treturn { objects, materials, layers, views, namedViews, groups, strings, settings };\n\n\t}\n\n\tfunction extractObjectData( object, doc ) {\n\n\t\tconst _geometry = object.geometry();\n\t\tconst _attributes = object.attributes();\n\t\tlet objectType = _geometry.objectType;\n\t\tlet geometry, attributes, position, data, mesh;\n\n\t\t// skip instance definition objects\n\t\t//if( _attributes.isInstanceDefinitionObject ) { continue; }\n\n\t\t// TODO: handle other geometry types\n\t\tswitch ( objectType ) {\n\n\t\t\tcase rhino.ObjectType.Curve:\n\n\t\t\t\tconst pts = curveToPoints( _geometry, 100 );\n\n\t\t\t\tposition = {};\n\t\t\t\tattributes = {};\n\t\t\t\tdata = {};\n\n\t\t\t\tposition.itemSize = 3;\n\t\t\t\tposition.type = 'Float32Array';\n\t\t\t\tposition.array = [];\n\n\t\t\t\tfor ( let j = 0; j < pts.length; j ++ ) {\n\n\t\t\t\t\tposition.array.push( pts[ j ][ 0 ] );\n\t\t\t\t\tposition.array.push( pts[ j ][ 1 ] );\n\t\t\t\t\tposition.array.push( pts[ j ][ 2 ] );\n\n\t\t\t\t}\n\n\t\t\t\tattributes.position = position;\n\t\t\t\tdata.attributes = attributes;\n\n\t\t\t\tgeometry = { data };\n\n\t\t\t\tbreak;\n\n\t\t\tcase rhino.ObjectType.Point:\n\n\t\t\t\tconst pt = _geometry.location;\n\n\t\t\t\tposition = {};\n\t\t\t\tconst color = {};\n\t\t\t\tattributes = {};\n\t\t\t\tdata = {};\n\n\t\t\t\tposition.itemSize = 3;\n\t\t\t\tposition.type = 'Float32Array';\n\t\t\t\tposition.array = [ pt[ 0 ], pt[ 1 ], pt[ 2 ] ];\n\n\t\t\t\tconst _color = _attributes.drawColor( doc );\n\n\t\t\t\tcolor.itemSize = 3;\n\t\t\t\tcolor.type = 'Float32Array';\n\t\t\t\tcolor.array = [ _color.r / 255.0, _color.g / 255.0, _color.b / 255.0 ];\n\n\t\t\t\tattributes.position = position;\n\t\t\t\tattributes.color = color;\n\t\t\t\tdata.attributes = attributes;\n\n\t\t\t\tgeometry = { data };\n\n\t\t\t\tbreak;\n\n\t\t\tcase rhino.ObjectType.PointSet:\n\t\t\tcase rhino.ObjectType.Mesh:\n\n\t\t\t\tgeometry = _geometry.toThreejsJSON();\n\n\t\t\t\tbreak;\n\n\t\t\tcase rhino.ObjectType.Brep:\n\n\t\t\t\tconst faces = _geometry.faces();\n\t\t\t\tmesh = new rhino.Mesh();\n\n\t\t\t\tfor ( let faceIndex = 0; faceIndex < faces.count; faceIndex ++ ) {\n\n\t\t\t\t\tconst face = faces.get( faceIndex );\n\t\t\t\t\tconst _mesh = face.getMesh( rhino.MeshType.Any );\n\n\t\t\t\t\tif ( _mesh ) {\n\n\t\t\t\t\t\tmesh.append( _mesh );\n\t\t\t\t\t\t_mesh.delete();\n\n\t\t\t\t\t}\n\n\t\t\t\t\tface.delete();\n\n\t\t\t\t}\n\n\t\t\t\tif ( mesh.faces().count > 0 ) {\n\n\t\t\t\t\tmesh.compact();\n\t\t\t\t\tgeometry = mesh.toThreejsJSON();\n\t\t\t\t\tfaces.delete();\n\n\t\t\t\t}\n\n\t\t\t\tmesh.delete();\n\n\t\t\t\tbreak;\n\n\t\t\tcase rhino.ObjectType.Extrusion:\n\n\t\t\t\tmesh = _geometry.getMesh( rhino.MeshType.Any );\n\n\t\t\t\tif ( mesh ) {\n\n\t\t\t\t\tgeometry = mesh.toThreejsJSON();\n\t\t\t\t\tmesh.delete();\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase rhino.ObjectType.TextDot:\n\n\t\t\t\tgeometry = extractProperties( _geometry );\n\n\t\t\t\tbreak;\n\n\t\t\tcase rhino.ObjectType.Light:\n\n\t\t\t\tgeometry = extractProperties( _geometry );\n\n\t\t\t\tif ( geometry.lightStyle.name === 'LightStyle_WorldLinear' ) {\n\n\t\t\t\t\tself.postMessage( { type: 'warning', id: taskID, data: {\n\t\t\t\t\t\tmessage: `THREE.3DMLoader: No conversion exists for ${objectType.constructor.name} ${geometry.lightStyle.name}`,\n\t\t\t\t\t\ttype: 'no conversion',\n\t\t\t\t\t\tguid: _attributes.id\n\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase rhino.ObjectType.InstanceReference:\n\n\t\t\t\tgeometry = extractProperties( _geometry );\n\t\t\t\tgeometry.xform = extractProperties( _geometry.xform );\n\t\t\t\tgeometry.xform.array = _geometry.xform.toFloatArray( true );\n\n\t\t\t\tbreak;\n\n\t\t\tcase rhino.ObjectType.SubD:\n\n\t\t\t\t// TODO: precalculate resulting vertices and faces and warn on excessive results\n\t\t\t\t_geometry.subdivide( 3 );\n\t\t\t\tmesh = rhino.Mesh.createFromSubDControlNet( _geometry );\n\t\t\t\tif ( mesh ) {\n\n\t\t\t\t\tgeometry = mesh.toThreejsJSON();\n\t\t\t\t\tmesh.delete();\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\t\t/*\n\t\t\t\tcase rhino.ObjectType.Annotation:\n\t\t\t\tcase rhino.ObjectType.Hatch:\n\t\t\t\tcase rhino.ObjectType.ClipPlane:\n\t\t\t\t*/\n\n\t\t\tdefault:\n\n\t\t\t\tself.postMessage( { type: 'warning', id: taskID, data: {\n\t\t\t\t\tmessage: `THREE.3DMLoader: Conversion not implemented for ${objectType.constructor.name}`,\n\t\t\t\t\ttype: 'not implemented',\n\t\t\t\t\tguid: _attributes.id\n\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tif ( geometry ) {\n\n\t\t\tattributes = extractProperties( _attributes );\n\t\t\tattributes.geometry = extractProperties( _geometry );\n\n\t\t\tif ( _attributes.groupCount > 0 ) {\n\n\t\t\t\tattributes.groupIds = _attributes.getGroupList();\n\n\t\t\t}\n\n\t\t\tif ( _attributes.userStringCount > 0 ) {\n\n\t\t\t\tattributes.userStrings = _attributes.getUserStrings();\n\n\t\t\t}\n\n\t\t\tif ( _geometry.userStringCount > 0 ) {\n\n\t\t\t\tattributes.geometry.userStrings = _geometry.getUserStrings();\n\n\t\t\t}\n\n\t\t\tattributes.drawColor = _attributes.drawColor( doc );\n\n\t\t\tobjectType = objectType.constructor.name;\n\t\t\tobjectType = objectType.substring( 11, objectType.length );\n\n\t\t\treturn { geometry, attributes, objectType };\n\n\t\t} else {\n\n\t\t\tself.postMessage( { type: 'warning', id: taskID, data: {\n\t\t\t\tmessage: `THREE.3DMLoader: ${objectType.constructor.name} has no associated mesh geometry.`,\n\t\t\t\ttype: 'missing mesh',\n\t\t\t\tguid: _attributes.id\n\t\t\t}\n\n\t\t\t} );\n\n\t\t}\n\n\t}\n\n\tfunction extractProperties( object ) {\n\n\t\tconst result = {};\n\n\t\tfor ( const property in object ) {\n\n\t\t\tconst value = object[ property ];\n\n\t\t\tif ( typeof value !== 'function' ) {\n\n\t\t\t\tif ( typeof value === 'object' && value !== null && value.hasOwnProperty( 'constructor' ) ) {\n\n\t\t\t\t\tresult[ property ] = { name: value.constructor.name, value: value.value };\n\n\t\t\t\t} else {\n\n\t\t\t\t\tresult[ property ] = value;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// these are functions that could be called to extract more data.\n\t\t\t\t//console.log( `${property}: ${object[ property ].constructor.name}` );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\tfunction curveToPoints( curve, pointLimit ) {\n\n\t\tlet pointCount = pointLimit;\n\t\tlet rc = [];\n\t\tconst ts = [];\n\n\t\tif ( curve instanceof rhino.LineCurve ) {\n\n\t\t\treturn [ curve.pointAtStart, curve.pointAtEnd ];\n\n\t\t}\n\n\t\tif ( curve instanceof rhino.PolylineCurve ) {\n\n\t\t\tpointCount = curve.pointCount;\n\t\t\tfor ( let i = 0; i < pointCount; i ++ ) {\n\n\t\t\t\trc.push( curve.point( i ) );\n\n\t\t\t}\n\n\t\t\treturn rc;\n\n\t\t}\n\n\t\tif ( curve instanceof rhino.PolyCurve ) {\n\n\t\t\tconst segmentCount = curve.segmentCount;\n\n\t\t\tfor ( let i = 0; i < segmentCount; i ++ ) {\n\n\t\t\t\tconst segment = curve.segmentCurve( i );\n\t\t\t\tconst segmentArray = curveToPoints( segment, pointCount );\n\t\t\t\trc = rc.concat( segmentArray );\n\t\t\t\tsegment.delete();\n\n\t\t\t}\n\n\t\t\treturn rc;\n\n\t\t}\n\n\t\tif ( curve instanceof rhino.ArcCurve ) {\n\n\t\t\tpointCount = Math.floor( curve.angleDegrees / 5 );\n\t\t\tpointCount = pointCount < 2 ? 2 : pointCount;\n\t\t\t// alternative to this hardcoded version: https://stackoverflow.com/a/18499923/2179399\n\n\t\t}\n\n\t\tif ( curve instanceof rhino.NurbsCurve && curve.degree === 1 ) {\n\n\t\t\tconst pLine = curve.tryGetPolyline();\n\n\t\t\tfor ( let i = 0; i < pLine.count; i ++ ) {\n\n\t\t\t\trc.push( pLine.get( i ) );\n\n\t\t\t}\n\n\t\t\tpLine.delete();\n\n\t\t\treturn rc;\n\n\t\t}\n\n\t\tconst domain = curve.domain;\n\t\tconst divisions = pointCount - 1.0;\n\n\t\tfor ( let j = 0; j < pointCount; j ++ ) {\n\n\t\t\tconst t = domain[ 0 ] + ( j / divisions ) * ( domain[ 1 ] - domain[ 0 ] );\n\n\t\t\tif ( t === domain[ 0 ] || t === domain[ 1 ] ) {\n\n\t\t\t\tts.push( t );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tconst tan = curve.tangentAt( t );\n\t\t\tconst prevTan = curve.tangentAt( ts.slice( - 1 )[ 0 ] );\n\n\t\t\t// Duplicated from THREE.Vector3\n\t\t\t// How to pass imports to worker?\n\n\t\t\tconst tS = tan[ 0 ] * tan[ 0 ] + tan[ 1 ] * tan[ 1 ] + tan[ 2 ] * tan[ 2 ];\n\t\t\tconst ptS = prevTan[ 0 ] * prevTan[ 0 ] + prevTan[ 1 ] * prevTan[ 1 ] + prevTan[ 2 ] * prevTan[ 2 ];\n\n\t\t\tconst denominator = Math.sqrt( tS * ptS );\n\n\t\t\tlet angle;\n\n\t\t\tif ( denominator === 0 ) {\n\n\t\t\t\tangle = Math.PI / 2;\n\n\t\t\t} else {\n\n\t\t\t\tconst theta = ( tan.x * prevTan.x + tan.y * prevTan.y + tan.z * prevTan.z ) / denominator;\n\t\t\t\tangle = Math.acos( Math.max( - 1, Math.min( 1, theta ) ) );\n\n\t\t\t}\n\n\t\t\tif ( angle < 0.1 ) continue;\n\n\t\t\tts.push( t );\n\n\t\t}\n\n\t\trc = ts.map( t => curve.pointAt( t ) );\n\t\treturn rc;\n\n\t}\n\n}\n\nexport { Rhino3dmLoader };\n"],
  "mappings": "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",
  "names": ["width", "height", "jsContent", "binaryContent", "worker", "rhino"]
}
