{
  "version": 3,
  "sources": ["../../three/examples/jsm/geometries/DecalGeometry.js"],
  "sourcesContent": ["import {\r\n\tBufferGeometry,\r\n\tFloat32BufferAttribute,\r\n\tMatrix4,\r\n\tVector3\r\n} from 'three';\r\n\r\n/**\r\n * You can use this geometry to create a decal mesh, that serves different kinds of purposes.\r\n * e.g. adding unique details to models, performing dynamic visual environmental changes or covering seams.\r\n *\r\n * Constructor parameter:\r\n *\r\n * mesh — Any mesh object\r\n * position — Position of the decal projector\r\n * orientation — Orientation of the decal projector\r\n * size — Size of the decal projector\r\n *\r\n * reference: http://blog.wolfire.com/2009/06/how-to-project-decals/\r\n *\r\n */\r\n\r\nclass DecalGeometry extends BufferGeometry {\r\n\r\n\tconstructor( mesh, position, orientation, size ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\t// buffers\r\n\r\n\t\tconst vertices = [];\r\n\t\tconst normals = [];\r\n\t\tconst uvs = [];\r\n\r\n\t\t// helpers\r\n\r\n\t\tconst plane = new Vector3();\r\n\r\n\t\t// this matrix represents the transformation of the decal projector\r\n\r\n\t\tconst projectorMatrix = new Matrix4();\r\n\t\tprojectorMatrix.makeRotationFromEuler( orientation );\r\n\t\tprojectorMatrix.setPosition( position );\r\n\r\n\t\tconst projectorMatrixInverse = new Matrix4();\r\n\t\tprojectorMatrixInverse.copy( projectorMatrix ).invert();\r\n\r\n\t\t// generate buffers\r\n\r\n\t\tgenerate();\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\r\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\r\n\r\n\t\tfunction generate() {\r\n\r\n\t\t\tlet decalVertices = [];\r\n\r\n\t\t\tconst vertex = new Vector3();\r\n\t\t\tconst normal = new Vector3();\r\n\r\n\t\t\t// handle different geometry types\r\n\r\n\t\t\tconst geometry = mesh.geometry;\r\n\r\n\t\t\tconst positionAttribute = geometry.attributes.position;\r\n\t\t\tconst normalAttribute = geometry.attributes.normal;\r\n\r\n\t\t\t// first, create an array of 'DecalVertex' objects\r\n\t\t\t// three consecutive 'DecalVertex' objects represent a single face\r\n\t\t\t//\r\n\t\t\t// this data structure will be later used to perform the clipping\r\n\r\n\t\t\tif ( geometry.index !== null ) {\r\n\r\n\t\t\t\t// indexed BufferGeometry\r\n\r\n\t\t\t\tconst index = geometry.index;\r\n\r\n\t\t\t\tfor ( let i = 0; i < index.count; i ++ ) {\r\n\r\n\t\t\t\t\tvertex.fromBufferAttribute( positionAttribute, index.getX( i ) );\r\n\t\t\t\t\tnormal.fromBufferAttribute( normalAttribute, index.getX( i ) );\r\n\r\n\t\t\t\t\tpushDecalVertex( decalVertices, vertex, normal );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// non-indexed BufferGeometry\r\n\r\n\t\t\t\tfor ( let i = 0; i < positionAttribute.count; i ++ ) {\r\n\r\n\t\t\t\t\tvertex.fromBufferAttribute( positionAttribute, i );\r\n\t\t\t\t\tnormal.fromBufferAttribute( normalAttribute, i );\r\n\r\n\t\t\t\t\tpushDecalVertex( decalVertices, vertex, normal );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// second, clip the geometry so that it doesn't extend out from the projector\r\n\r\n\t\t\tdecalVertices = clipGeometry( decalVertices, plane.set( 1, 0, 0 ) );\r\n\t\t\tdecalVertices = clipGeometry( decalVertices, plane.set( - 1, 0, 0 ) );\r\n\t\t\tdecalVertices = clipGeometry( decalVertices, plane.set( 0, 1, 0 ) );\r\n\t\t\tdecalVertices = clipGeometry( decalVertices, plane.set( 0, - 1, 0 ) );\r\n\t\t\tdecalVertices = clipGeometry( decalVertices, plane.set( 0, 0, 1 ) );\r\n\t\t\tdecalVertices = clipGeometry( decalVertices, plane.set( 0, 0, - 1 ) );\r\n\r\n\t\t\t// third, generate final vertices, normals and uvs\r\n\r\n\t\t\tfor ( let i = 0; i < decalVertices.length; i ++ ) {\r\n\r\n\t\t\t\tconst decalVertex = decalVertices[ i ];\r\n\r\n\t\t\t\t// create texture coordinates (we are still in projector space)\r\n\r\n\t\t\t\tuvs.push(\r\n\t\t\t\t\t0.5 + ( decalVertex.position.x / size.x ),\r\n\t\t\t\t\t0.5 + ( decalVertex.position.y / size.y )\r\n\t\t\t\t);\r\n\r\n\t\t\t\t// transform the vertex back to world space\r\n\r\n\t\t\t\tdecalVertex.position.applyMatrix4( projectorMatrix );\r\n\r\n\t\t\t\t// now create vertex and normal buffer data\r\n\r\n\t\t\t\tvertices.push( decalVertex.position.x, decalVertex.position.y, decalVertex.position.z );\r\n\t\t\t\tnormals.push( decalVertex.normal.x, decalVertex.normal.y, decalVertex.normal.z );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction pushDecalVertex( decalVertices, vertex, normal ) {\r\n\r\n\t\t\t// transform the vertex to world space, then to projector space\r\n\r\n\t\t\tvertex.applyMatrix4( mesh.matrixWorld );\r\n\t\t\tvertex.applyMatrix4( projectorMatrixInverse );\r\n\r\n\t\t\tnormal.transformDirection( mesh.matrixWorld );\r\n\r\n\t\t\tdecalVertices.push( new DecalVertex( vertex.clone(), normal.clone() ) );\r\n\r\n\t\t}\r\n\r\n\t\tfunction clipGeometry( inVertices, plane ) {\r\n\r\n\t\t\tconst outVertices = [];\r\n\r\n\t\t\tconst s = 0.5 * Math.abs( size.dot( plane ) );\r\n\r\n\t\t\t// a single iteration clips one face,\r\n\t\t\t// which consists of three consecutive 'DecalVertex' objects\r\n\r\n\t\t\tfor ( let i = 0; i < inVertices.length; i += 3 ) {\r\n\r\n\t\t\t\tlet total = 0;\r\n\t\t\t\tlet nV1;\r\n\t\t\t\tlet nV2;\r\n\t\t\t\tlet nV3;\r\n\t\t\t\tlet nV4;\r\n\r\n\t\t\t\tconst d1 = inVertices[ i + 0 ].position.dot( plane ) - s;\r\n\t\t\t\tconst d2 = inVertices[ i + 1 ].position.dot( plane ) - s;\r\n\t\t\t\tconst d3 = inVertices[ i + 2 ].position.dot( plane ) - s;\r\n\r\n\t\t\t\tconst v1Out = d1 > 0;\r\n\t\t\t\tconst v2Out = d2 > 0;\r\n\t\t\t\tconst v3Out = d3 > 0;\r\n\r\n\t\t\t\t// calculate, how many vertices of the face lie outside of the clipping plane\r\n\r\n\t\t\t\ttotal = ( v1Out ? 1 : 0 ) + ( v2Out ? 1 : 0 ) + ( v3Out ? 1 : 0 );\r\n\r\n\t\t\t\tswitch ( total ) {\r\n\r\n\t\t\t\t\tcase 0: {\r\n\r\n\t\t\t\t\t\t// the entire face lies inside of the plane, no clipping needed\r\n\r\n\t\t\t\t\t\toutVertices.push( inVertices[ i ] );\r\n\t\t\t\t\t\toutVertices.push( inVertices[ i + 1 ] );\r\n\t\t\t\t\t\toutVertices.push( inVertices[ i + 2 ] );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcase 1: {\r\n\r\n\t\t\t\t\t\t// one vertex lies outside of the plane, perform clipping\r\n\r\n\t\t\t\t\t\tif ( v1Out ) {\r\n\r\n\t\t\t\t\t\t\tnV1 = inVertices[ i + 1 ];\r\n\t\t\t\t\t\t\tnV2 = inVertices[ i + 2 ];\r\n\t\t\t\t\t\t\tnV3 = clip( inVertices[ i ], nV1, plane, s );\r\n\t\t\t\t\t\t\tnV4 = clip( inVertices[ i ], nV2, plane, s );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ( v2Out ) {\r\n\r\n\t\t\t\t\t\t\tnV1 = inVertices[ i ];\r\n\t\t\t\t\t\t\tnV2 = inVertices[ i + 2 ];\r\n\t\t\t\t\t\t\tnV3 = clip( inVertices[ i + 1 ], nV1, plane, s );\r\n\t\t\t\t\t\t\tnV4 = clip( inVertices[ i + 1 ], nV2, plane, s );\r\n\r\n\t\t\t\t\t\t\toutVertices.push( nV3 );\r\n\t\t\t\t\t\t\toutVertices.push( nV2.clone() );\r\n\t\t\t\t\t\t\toutVertices.push( nV1.clone() );\r\n\r\n\t\t\t\t\t\t\toutVertices.push( nV2.clone() );\r\n\t\t\t\t\t\t\toutVertices.push( nV3.clone() );\r\n\t\t\t\t\t\t\toutVertices.push( nV4 );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ( v3Out ) {\r\n\r\n\t\t\t\t\t\t\tnV1 = inVertices[ i ];\r\n\t\t\t\t\t\t\tnV2 = inVertices[ i + 1 ];\r\n\t\t\t\t\t\t\tnV3 = clip( inVertices[ i + 2 ], nV1, plane, s );\r\n\t\t\t\t\t\t\tnV4 = clip( inVertices[ i + 2 ], nV2, plane, s );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\toutVertices.push( nV1.clone() );\r\n\t\t\t\t\t\toutVertices.push( nV2.clone() );\r\n\t\t\t\t\t\toutVertices.push( nV3 );\r\n\r\n\t\t\t\t\t\toutVertices.push( nV4 );\r\n\t\t\t\t\t\toutVertices.push( nV3.clone() );\r\n\t\t\t\t\t\toutVertices.push( nV2.clone() );\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcase 2: {\r\n\r\n\t\t\t\t\t\t// two vertices lies outside of the plane, perform clipping\r\n\r\n\t\t\t\t\t\tif ( ! v1Out ) {\r\n\r\n\t\t\t\t\t\t\tnV1 = inVertices[ i ].clone();\r\n\t\t\t\t\t\t\tnV2 = clip( nV1, inVertices[ i + 1 ], plane, s );\r\n\t\t\t\t\t\t\tnV3 = clip( nV1, inVertices[ i + 2 ], plane, s );\r\n\t\t\t\t\t\t\toutVertices.push( nV1 );\r\n\t\t\t\t\t\t\toutVertices.push( nV2 );\r\n\t\t\t\t\t\t\toutVertices.push( nV3 );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ( ! v2Out ) {\r\n\r\n\t\t\t\t\t\t\tnV1 = inVertices[ i + 1 ].clone();\r\n\t\t\t\t\t\t\tnV2 = clip( nV1, inVertices[ i + 2 ], plane, s );\r\n\t\t\t\t\t\t\tnV3 = clip( nV1, inVertices[ i ], plane, s );\r\n\t\t\t\t\t\t\toutVertices.push( nV1 );\r\n\t\t\t\t\t\t\toutVertices.push( nV2 );\r\n\t\t\t\t\t\t\toutVertices.push( nV3 );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ( ! v3Out ) {\r\n\r\n\t\t\t\t\t\t\tnV1 = inVertices[ i + 2 ].clone();\r\n\t\t\t\t\t\t\tnV2 = clip( nV1, inVertices[ i ], plane, s );\r\n\t\t\t\t\t\t\tnV3 = clip( nV1, inVertices[ i + 1 ], plane, s );\r\n\t\t\t\t\t\t\toutVertices.push( nV1 );\r\n\t\t\t\t\t\t\toutVertices.push( nV2 );\r\n\t\t\t\t\t\t\toutVertices.push( nV3 );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcase 3: {\r\n\r\n\t\t\t\t\t\t// the entire face lies outside of the plane, so let's discard the corresponding vertices\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn outVertices;\r\n\r\n\t\t}\r\n\r\n\t\tfunction clip( v0, v1, p, s ) {\r\n\r\n\t\t\tconst d0 = v0.position.dot( p ) - s;\r\n\t\t\tconst d1 = v1.position.dot( p ) - s;\r\n\r\n\t\t\tconst s0 = d0 / ( d0 - d1 );\r\n\r\n\t\t\tconst v = new DecalVertex(\r\n\t\t\t\tnew Vector3(\r\n\t\t\t\t\tv0.position.x + s0 * ( v1.position.x - v0.position.x ),\r\n\t\t\t\t\tv0.position.y + s0 * ( v1.position.y - v0.position.y ),\r\n\t\t\t\t\tv0.position.z + s0 * ( v1.position.z - v0.position.z )\r\n\t\t\t\t),\r\n\t\t\t\tnew Vector3(\r\n\t\t\t\t\tv0.normal.x + s0 * ( v1.normal.x - v0.normal.x ),\r\n\t\t\t\t\tv0.normal.y + s0 * ( v1.normal.y - v0.normal.y ),\r\n\t\t\t\t\tv0.normal.z + s0 * ( v1.normal.z - v0.normal.z )\r\n\t\t\t\t)\r\n\t\t\t);\r\n\r\n\t\t\t// need to clip more values (texture coordinates)? do it this way:\r\n\t\t\t// intersectpoint.value = a.value + s * ( b.value - a.value );\r\n\r\n\t\t\treturn v;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n// helper\r\n\r\nclass DecalVertex {\r\n\r\n\tconstructor( position, normal ) {\r\n\r\n\t\tthis.position = position;\r\n\t\tthis.normal = normal;\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor( this.position.clone(), this.normal.clone() );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { DecalGeometry, DecalVertex };\r\n"],
  "mappings": "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",
  "names": ["plane"]
}
